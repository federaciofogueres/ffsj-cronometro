/**
 * Contador Playbacks API
 * API para la app contador-playbacks
 *
 * OpenAPI spec version: 1.0.0
 * Contact: transformaciondigital@hogueras.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {
    HttpClient,
    HttpEvent,
    HttpHeaders,
    HttpResponse
} from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';

import { Observable } from 'rxjs';

import { Asociacion } from '../model/asociacion';
import { AsociacionResponse } from '../model/asociacionResponse';
import { AsociacionesResponse } from '../model/asociacionesResponse';
import { InlineResponse200 } from '../model/inlineResponse200';

import { Configuration } from '../configuration';
import { BASE_PATH } from '../variables';


@Injectable({ providedIn: 'root' })
export class AsociacionesService {

    protected basePath = 'https://virtserver.swaggerhub.com/federaciodefogueres/contador-playbacks-api/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Crea una asociación
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAsociacion(body?: Asociacion, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public createAsociacion(body?: Asociacion, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public createAsociacion(body?: Asociacion, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public createAsociacion(body?: Asociacion, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse200>('post', `${this.basePath}/asociaciones`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Borra los datos de la asociación pasada por parámetro.
     * @param idAsociacion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAsociacion(idAsociacion: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public deleteAsociacion(idAsociacion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public deleteAsociacion(idAsociacion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public deleteAsociacion(idAsociacion: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (idAsociacion === null || idAsociacion === undefined) {
            throw new Error('Required parameter idAsociacion was null or undefined when calling deleteAsociacion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse200>('delete', `${this.basePath}/asociaciones/${encodeURIComponent(String(idAsociacion))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Devuelve todas las asociaciones con su información.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAsociaciones(observe?: 'body', reportProgress?: boolean): Observable<AsociacionesResponse>;
    public getAllAsociaciones(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AsociacionesResponse>>;
    public getAllAsociaciones(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AsociacionesResponse>>;
    public getAllAsociaciones(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AsociacionesResponse>('get', `${this.basePath}/asociaciones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Devuelve todos los datos de la asociación consultada
     * @param idAsociacion 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAsociacion(idAsociacion: string, observe?: 'body', reportProgress?: boolean): Observable<AsociacionResponse>;
    public getAsociacion(idAsociacion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AsociacionResponse>>;
    public getAsociacion(idAsociacion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AsociacionResponse>>;
    public getAsociacion(idAsociacion: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (idAsociacion === null || idAsociacion === undefined) {
            throw new Error('Required parameter idAsociacion was null or undefined when calling getAsociacion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AsociacionResponse>('get', `${this.basePath}/asociaciones/${encodeURIComponent(String(idAsociacion))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Actualizar una asociación
     * @param idAsociacion 
     * @param body Item to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putAsociacion(idAsociacion: string, body?: Asociacion, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public putAsociacion(idAsociacion: string, body?: Asociacion, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public putAsociacion(idAsociacion: string, body?: Asociacion, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public putAsociacion(idAsociacion: string, body?: Asociacion, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (idAsociacion === null || idAsociacion === undefined) {
            throw new Error('Required parameter idAsociacion was null or undefined when calling putAsociacion.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse200>('put', `${this.basePath}/asociaciones/${encodeURIComponent(String(idAsociacion))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
